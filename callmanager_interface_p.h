/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c CallManagerInterface -p callmanager_interface_p.h:callmanager_interface.cpp -i metatypes.h ../sflphone-common/src/dbus/callmanager-introspec.xml
 *
 * qdbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef CALLMANAGER_INTERFACE_P_H_1241041431
#define CALLMANAGER_INTERFACE_P_H_1241041431

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "metatypes.h"

/*
 * Proxy class for interface org.sflphone.SFLphone.CallManager
 */
class CallManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.sflphone.SFLphone.CallManager"; }

public:
    CallManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~CallManagerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> accept(const QString &callID)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(callID);
        return asyncCallWithArgumentList(QLatin1String("accept"), argumentList);
    }

    inline QDBusPendingReply<MapStringString> getCallDetails(const QString &callID)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(callID);
        return asyncCallWithArgumentList(QLatin1String("getCallDetails"), argumentList);
    }

    inline QDBusPendingReply<QString> getCurrentCallID()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getCurrentCallID"), argumentList);
    }

    inline QDBusPendingReply<QString> getCurrentCodecName(const QString &callID)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(callID);
        return asyncCallWithArgumentList(QLatin1String("getCurrentCodecName"), argumentList);
    }

    inline QDBusPendingReply<bool> getIsRecording(const QString &callID)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(callID);
        return asyncCallWithArgumentList(QLatin1String("getIsRecording"), argumentList);
    }

    inline QDBusPendingReply<double> getVolume(const QString &device)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(device);
        return asyncCallWithArgumentList(QLatin1String("getVolume"), argumentList);
    }

    inline QDBusPendingReply<> hangUp(const QString &callID)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(callID);
        return asyncCallWithArgumentList(QLatin1String("hangUp"), argumentList);
    }

    inline QDBusPendingReply<> hold(const QString &callID)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(callID);
        return asyncCallWithArgumentList(QLatin1String("hold"), argumentList);
    }

    inline QDBusPendingReply<> placeCall(const QString &accountID, const QString &callID, const QString &to)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(accountID) << qVariantFromValue(callID) << qVariantFromValue(to);
        return asyncCallWithArgumentList(QLatin1String("placeCall"), argumentList);
    }

    inline QDBusPendingReply<> playDTMF(const QString &key)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(key);
        return asyncCallWithArgumentList(QLatin1String("playDTMF"), argumentList);
    }

    inline QDBusPendingReply<> refuse(const QString &callID)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(callID);
        return asyncCallWithArgumentList(QLatin1String("refuse"), argumentList);
    }

    inline QDBusPendingReply<> setRecording(const QString &callID)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(callID);
        return asyncCallWithArgumentList(QLatin1String("setRecording"), argumentList);
    }

    inline QDBusPendingReply<> setVolume(const QString &device, double value)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(device) << qVariantFromValue(value);
        return asyncCallWithArgumentList(QLatin1String("setVolume"), argumentList);
    }

    inline QDBusPendingReply<> startTone(int start, int type)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(start) << qVariantFromValue(type);
        return asyncCallWithArgumentList(QLatin1String("startTone"), argumentList);
    }

    inline QDBusPendingReply<> transfert(const QString &callID, const QString &to)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(callID) << qVariantFromValue(to);
        return asyncCallWithArgumentList(QLatin1String("transfert"), argumentList);
    }

    inline QDBusPendingReply<> unhold(const QString &callID)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(callID);
        return asyncCallWithArgumentList(QLatin1String("unhold"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void callStateChanged(const QString &callID, const QString &state);
    void currentSelectedCodec(const QString &callID, const QString &codecName);
    void incomingCall(const QString &accountID, const QString &callID, const QString &from);
    void incomingMessage(const QString &accountID, const QString &message);
    void voiceMailNotify(const QString &accountID, int count);
    void volumeChanged(const QString &device, double value);
};

namespace org {
  namespace sflphone {
    namespace SFLphone {
      typedef ::CallManagerInterface CallManager;
    }
  }
}
#endif
