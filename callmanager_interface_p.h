/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -c CallManagerInterface -p call_manager_interface_p.h:call_manager_interface.cpp -i metatypes.h callmanager-introspec.xml
 *
 * dbusxml2cpp is Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef CALL_MANAGER_INTERFACE_P_H_1236370787
#define CALL_MANAGER_INTERFACE_P_H_1236370787

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "metatypes.h"

/*
 * Proxy class for interface org.sflphone.SFLphone.CallManager
 */
class CallManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.sflphone.SFLphone.CallManager"; }

public:
    CallManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~CallManagerInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<void> accept(const QString &callID)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(callID);
        return callWithArgumentList(QDBus::Block, QLatin1String("accept"), argumentList);
    }

    inline QDBusReply<MapStringString> getCallDetails(const QString &callID)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(callID);
        return callWithArgumentList(QDBus::Block, QLatin1String("getCallDetails"), argumentList);
    }

    inline QDBusReply<QString> getCurrentCallID()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("getCurrentCallID"), argumentList);
    }

    inline QDBusReply<double> getVolume(const QString &device)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(device);
        return callWithArgumentList(QDBus::Block, QLatin1String("getVolume"), argumentList);
    }

    inline QDBusReply<void> hangUp(const QString &callID)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(callID);
        return callWithArgumentList(QDBus::Block, QLatin1String("hangUp"), argumentList);
    }

    inline QDBusReply<void> hold(const QString &callID)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(callID);
        return callWithArgumentList(QDBus::Block, QLatin1String("hold"), argumentList);
    }

    inline QDBusReply<void> placeCall(const QString &accountID, const QString &callID, const QString &to)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(accountID) << qVariantFromValue(callID) << qVariantFromValue(to);
        return callWithArgumentList(QDBus::Block, QLatin1String("placeCall"), argumentList);
    }

    inline QDBusReply<void> playDTMF(const QString &key)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(key);
        return callWithArgumentList(QDBus::Block, QLatin1String("playDTMF"), argumentList);
    }

    inline QDBusReply<void> refuse(const QString &callID)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(callID);
        return callWithArgumentList(QDBus::Block, QLatin1String("refuse"), argumentList);
    }

    inline QDBusReply<void> setVolume(const QString &device, double value)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(device) << qVariantFromValue(value);
        return callWithArgumentList(QDBus::Block, QLatin1String("setVolume"), argumentList);
    }

    inline QDBusReply<void> startTone(int start, int type)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(start) << qVariantFromValue(type);
        return callWithArgumentList(QDBus::Block, QLatin1String("startTone"), argumentList);
    }

    inline QDBusReply<void> transfert(const QString &callID, const QString &to)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(callID) << qVariantFromValue(to);
        return callWithArgumentList(QDBus::Block, QLatin1String("transfert"), argumentList);
    }

    inline QDBusReply<void> unhold(const QString &callID)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(callID);
        return callWithArgumentList(QDBus::Block, QLatin1String("unhold"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void callStateChanged(const QString &callID, const QString &state);
    void error(MapStringString details);
    void incomingCall(const QString &accountID, const QString &callID, const QString &from);
    void incomingMessage(const QString &accountID, const QString &message);
    void voiceMailNotify(const QString &accountID, int count);
    void volumeChanged(const QString &device, double value);
};

namespace org {
  namespace sflphone {
    namespace SFLphone {
      typedef ::CallManagerInterface CallManager;
    }
  }
}
#endif
